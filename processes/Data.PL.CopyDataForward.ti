#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#LASTCHANGE Louise Davenport, 2015-08-24 Amended workings process to refer to Working not PL Workings process
#LASTCHANGE Louise Davenport, 2015-05-26 Added global variable for copying only Sandbox
#LASTCHANGE Louise Davenport, 2014-12-10 changed source view to supproess zeros etc
#LASTCHANGE Inel Botha, 2014-07-11, Added code to copy PL Workings data forward to
#LASTCHANGE Inel Botha, 2014-05-27, Initial set up of process
#GENERALCOMMENT This process copies the data from a selected year forward to out years
#DATASOURCECOMMENT PL cube view built based on parameters selected
#PROLOGCOMMENT Clears out existing data in future years, and builds the data source
#METADATACOMMENT N/A
#DATACOMMENT Loads the data into the future years
#EPILOGCOMMENT Destroys the view used as the data source


##########################################################
## Define variables                                                                                                   ##
## If parameters are consolidated, need to be set to -NElements for data source     ##
##########################################################
# Declare Global Variables to get current process name
NumericGlobalVariable('SandBoxValue');
SandBoxValue = GetUseActiveSandboxProperty();



sCube = 'PL' ;
sCallProcess = '}CTK_ViewCall' ;
sAccountDim = 'Account' ;
sCopyAttr = 'Copy Forward' ;
sMeasDim = 'PL Measure' ;
#sWorkingsProcess = 'Data.PLWorkings.CopyDataForward' ;
sWorkingsProcess = 'Data.Workings.CopyDataForward' ;

#Period dimension - source period
sPeriodDim = 'Period' ;
sSourcePeriod = pBasePeriod| '-NElements' ;

#Period dimension - destination period
sYear = NUMBERTOSTRING (NUMBR (SUBST (pBasePeriod, 1, 4)) + pNoOfYears)  ;
sDestYear = NUMBERTOSTRING (NUMBR (SUBST (pBasePeriod, 1, 4)) + pNoOfYears) | '.FY' ;
sDestPeriod = sDestYear | '-NElements' ;

#Version dimension - reject if 'Actuals' is selected
IF (pVersion@='Actual');
   ItemReject('Actuals cannot be overwritten');
   ProcessBreak;
ENDIF;

#Entity dimension
sEntityDim = 'Entity' ;
IF (DTYPE (sEntityDim, pEntity)@='C');
   sEntity = pEntity| '-NElements' ;
ELSE;
   sEntity = pEntity ;
ENDIF;

#Cost Centre dimension
sCostCentreDim = 'Cost Centre' ;
IF (DTYPE (sCostCentreDim, pCostCentre)@='C');
   sCostCentre = pCostCentre| '-NElements' ;
ELSE;
   sCostCentre = pCostCentre ;
ENDIF;

#Project dimension
sProjectDim = 'Project' ;
IF (DTYPE (sProjectDim, pProject)@='C');
   sProject = pProject| '-NElements' ;
ELSE;
   sProject = pProject ;
ENDIF;

#Currency dimension
sCurrencyDim = 'Currency' ;
IF (DTYPE (sCurrencyDim, pCurrency)@='C');
   sCurrency = pCurrency| '-NElements' ;
ELSE;
   sCurrency = pCurrency ;
ENDIF;

#Account dimension
sPLAccountDim = 'PL Account' ;
IF (DTYPE (sPLAccountDim, pAccount)@='C');
   sPLAccount = pAccount| '-NElements' ;
ELSE;
   sPLAccount = pAccount ;
ENDIF;

#PL Workings dimension
sPLLineDim = 'PL Line' ;
sPLLine = 'All Lines-NElements' ;



###############################
## Clear out existing data in future years    ##
###############################

sZeroOpt = 'Zero' ;

sStr = sCube | ', Version,' | pVersion | ', Period,' | sDestPeriod | ',Entity,' | sEntity | ', Cost Centre,' | sCostCentre | ',Project,' | sProject ;
sStr = sStr | ',Currency,' | sCurrency | ',Report Type,Local,PL Account,' | sPLAccount | ',PL Measure,Amount' ;
ExecuteProcess (sCallProcess, 'pOpt', sZeroOpt, 'pStr', sStr);

######################################
## Build data source and set as source for process    ##
######################################
sBuildOpt = 'Build' ;

sStr = sCube | ', Version,' | pVersion | ', Period,' | sSourcePeriod | ',Entity,' | sEntity | ', Cost Centre,' | sCostCentre | ',Project,' | sProject ;
sStr = sStr | ',Currency,' | sCurrency | ',Report Type,Local,PL Account,' | sPLAccount | ',PL Measure,Amount' ;
ExecuteProcess (sCallProcess, 'pOpt', sBuildOpt, 'pStr', sStr);

#PROCESSQUIT ;

sView = '}CTK_Viewbuild ' | sCube ;


################################################
## Set Attributes of the Source Cube View                                        ##
################################################
## Suppress Zeroes
ViewSuppressZeroesSet(sCube, sView, 1);
## Exclude consolidated values
ViewExtractSkipCalcsSet(sCube, sView, 1);
## Exclude Zero values
ViewExtractSkipZeroesSet(sCube, sView, 1);


#################################################
## Reset Process Data Source                                                            ##
#################################################
DataSourceType = 'VIEW';
DataSourceNameForServer = sCube ;
DataSourceCubeView = sView;



#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


#########################################
## Skip accounts with attribute 'Copy Forward' set to 'N'   ##
#########################################
sCopyForward = Attrs (sAccountDim, vPLAccount, sCopyAttr);

IF (sCopyForward @= 'N' );
   ITEMSKIP;
ENDIF;

######################################
## Determine future year period to load data against  ##
######################################
sPeriod = sYear | '.' | SUBST(vPeriod, 6, 2) ;

If (Dtype (sMeasDim, vPLMeasure)@='S');
   If (CellIsUpdateable (sCube, vVersion, sPeriod, vEntity, vCostCentre, vProject, vCurrency, vReportType, vPLAccount, vPLMeasure) = 1) ;
      sValue = NumberToString (vValue);
      CellPutS (sValue, sCube, vVersion, sPeriod, vEntity, vCostCentre, vProject, vCurrency, vReportType, vPLAccount, vPLMeasure);
   EndIf;
Else;
   If (CellIsUpdateable (sCube, vVersion, sPeriod, vEntity, vCostCentre, vProject, vCurrency, vReportType, vPLAccount, vPLMeasure) = 1) ;
      CellPutN (vValue, sCube, vVersion, sPeriod, vEntity, vCostCentre, vProject, vCurrency, vReportType, vPLAccount, vPLMeasure);
   EndIf;
EndIf;


#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


#############################
## Destroy view used as data source    ##
#############################
sDestroyOpt = 'Destroy' ;
ExecuteProcess (sCallProcess, 'pOpt', sDestroyOpt, 'pStr', sCube);

##########################################
## Execute process to copy data for  Workings cube          ##
##########################################
ExecuteProcess (sWorkingsProcess, 'pBasePeriod', pBasePeriod, 'pVersion', pVersion, 'pEntity', pEntity, 'pCostCentre', pCostCentre, 'pProject', pProject, 'pCurrency', pCurrency, 'pAccount', pAccount, 'pNoOfYears', pNoOfYears);
#endregion
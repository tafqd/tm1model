#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#LASTCHANGE Louise Davenport 17-Aug-2014 Update Prolog for Generic Treatment and ability to copy from a different version
#LASTCHANGE Louise Davenport 26-May-2014 Update Data Tab for generic treatment 
#LASTCHANGE Peter Currie Update Load File
#GENERALCOMMENT This process is to be used to populate opening balances where the information is not available from the source system
#DATASOURCECOMMENT Financials Cube view
#PROLOGCOMMENT Cube ZeroOut
#METADATACOMMENT N/A
#DATACOMMENT Load Data. Any PL (current year earnings) Data to go to Retained Earnings carried forward account
#EPILOGCOMMENT Tidy Objects


###########################
## Define Constants                         ##
###########################
sCube = 'Financials';
sName = GetProcessName();
vProcess = '}CTK_ViewCall';
s_SourceViewName = '}CTK_Viewbuild ' | sCube;

# Validate Parameter Inputs
sVersion = pVersionTo;

sVersionDim = 'Version';
sPeriodDim = 'Period';
sProjectDim = 'Project';
sEntityDim = 'Entity';
sReportTypeDim = 'Report Type';
sAccountDim = 'Account';
sCostCentreDim = 'Cost Centre';
sMeasureDim = 'Financial Measure';

s_DRCRAttr = 'DebitCreditFlag';
s_AcctTypeAttr = 'AccountFlag';
s_TypeAttr = 'Type';
s_RelatedAttr = 'Related Account';

s_Local = 'Local';
s_Group = 'Group';
pReportingType = s_Local|'|'|s_Group;


s_AccountConsol = 'Balance Sheet';
s_SourceAccount = s_AccountConsol |'-NElements';


s_LastYear = NumberToString(StringToNumber(pPeriod) - 1);
s_SourcePeriod = s_LastYear|'.13.LTD';
s_TargetPeriod = pPeriod|'.00';

s_SourceMeasure = 'Total Amount-NElements';
s_TargetMeasure = 'Amount';


##############################
## Turn off Cube Logging                        ##
############################## 
CubeSetLogChanges(sCube, 0);


##############################
## Clear out Target View                          ##
############################## 
# Use the cortell toolkit processes }CTK_ViewCall to define the section of the cube to zero out
# the vStr variable defines all the dimensional point we limit to zero, e.g. only version actual, only the year specified in the parameter 
# and only the company specified in the parameter and only the measure amount (to prevent clearing any manual entries)

# Execution of the zero out process
vStr = sCube|','|sVersionDim|','|sVersion|','|sPeriodDim|','|s_TargetPeriod|','|sMeasureDim|','|s_TargetMeasure;
pOpt = 'Zero_'|sName;
ExecuteProcess(vProcess,'pOpt',pOpt,'pStr',vStr);


##############################
## Determine Source View                       ##
############################## 
pOpt = 'BuildL0';
pStr = sCube|','|sVersionDim|','|pVersionFrom|','|sPeriodDim|','|s_SourcePeriod|','|sAccountDim|','|s_SourceAccount|','|sMeasureDim|','|s_SourceMeasure;
ExecuteProcess(vProcess, 'pOpt', pOpt, 'pStr', pStr);


#####################################################################
## Set Attributes of the Source Cube View                                                                                          ##
#####################################################################
## Suppress Zeroes
ViewSuppressZeroesSet(sCube, s_SourceViewName, 1);
## Include consolidated values
ViewExtractSkipCalcsSet(sCube, s_SourceViewName, 0);
## Include rule calculated values
ViewExtractSkipRuleValuesSet(sCube, s_SourceViewName, 0);
## Exclude Zero values
ViewExtractSkipZeroesSet(sCube, s_SourceViewName, 1);


#####################################################################
## Reset Process Data Source                                                                                                           ##
#####################################################################
DataSourceType = 'VIEW';
DataSourceNameForServer = sCube;
DataSourceCubeView = s_SourceViewName;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


##############################
## Define Variables                                  ##
##############################
# Convert Current Year Earnings into RE
If(AttrS(sAccountDim,vAccount,s_TypeAttr)@='CY');
 sAccount = AttrS(sAccountDim,vAccount, s_RelatedAttr);
Else;
  sAccount = vAccount;
EndIf;


nWeighting = 1;
nMovement = nWeighting * nValue;

##################################
## Write to Cube                                               ##
##################################
If(CellIsUpdateable(sCube, sVersion, s_TargetPeriod, vEntity, vCostCentre, vProject, vCurrency, vReportType, sAccount, s_TargetMeasure) = 1);
  nTemp = CellGetN(sCube, sVersion, s_TargetPeriod, vEntity, vCostCentre, vProject, vCurrency, vReportType,sAccount,s_TargetMeasure);
  CellPutN(nTemp + nMovement,sCube,sVersion,s_TargetPeriod,vEntity,vCostCentre,vProject,vCurrency,vReportType,sAccount,s_TargetMeasure);
EndIf;

#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
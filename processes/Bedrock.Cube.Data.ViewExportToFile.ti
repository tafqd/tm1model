#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****




#####################################################################################
##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##
#####################################################################################

# This cube exports data from the specified cube to an ASCII file.

# Note:
# - As this TI has a view as a data source it requires the implicit variables NValue, SValue and Value_is_String
# - To edit this TI either without VIZIER a temp cube with 24 dims is needed as the preview data source or set the data
#   source to ASCII and manually edit the TI in notepad after saving to add back the required implicit view variables


### Constants ###

cProcess = 'Bedrock.Cube.Data.ViewExportToFile';
cTimeStamp = TimSt( Now, '\Y\m\d\h\i\s' );
sRandomInt = NumberToString( INT( RAND( ) * 1000 ));
cDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Prolog.debug';

  # Log start time
  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

  # Log parameters
  AsciiOutput( sDebugFile, 'Parameters: pCube           : ' | pCube );
  AsciiOutput( sDebugFile, '            pExportPath     : ' | pExportPath );
  AsciiOutput( sDebugFile, '            pExportFile     : ' | pExportFile );
  AsciiOutput( sDebugFile, '            pView           : ' | pView );
  AsciiOutput( sDebugFile, '            pSkipRuleValues : ' | NumberToString( pSkipRuleValues ) );
  AsciiOutput( sDebugFile, '            pSkipCalcValues : ' | NumberToString( pSkipCalcValues ) );
  AsciiOutput( sDebugFile, '            pSkipNullValues : ' | NumberToString( pSkipNullValues ) );
  AsciiOutput( sDebugFile, '            pTitleRecord    : ' | NumberToString( pTitleRecord ) );

EndIf;


### Validate Parameters ###

nErrors = 0;
nRecordCount = 0;

# Validate cube
If( CubeExists( pCube ) = 0 );
  nErrors = 1;
  sMessage = 'Invalid source cube specified: ' | pCube;
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

# Validate view
If( pView @<> ''  & ViewExists( pCube, pView ) = 0 );
  nErrors = 1;
  sMessage = 'Invalid view specified: ' | pCube | ', ' | pView | '. View does not exist.';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

# Validate export path
If( Trim( pExportPath ) @= '' );
  pExportPath = SubSt( GetProcessErrorFileDirectory, 1, Long( GetProcessErrorFileDirectory )- 1 );
ElseIf( FileExists( pExportPath ) = 0 );
  nErrors = 1;
  sMessage = 'Invalid export path specified. Folder does not exist.';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;

# Validate export file
If( pExportFile @= '' );
  If( pView @= '' );
    sView = 'All';
  Else;
    sView = pView;
  EndIf;
  pExportFile = pCube |'.'| sView | '.Export.csv';
Else;
  If( Scan( '.', pExportFile ) = 0 );
    # No file extension specified
    pExportFile = pExportFile | '.csv';
  EndIf;
EndIf;

If( SubSt( pExportPath, Long( pExportPath ), 1 ) @<> '\' );
  pExportPath = pExportPath | '\';
EndIf;
sFile = pExportPath | pExportFile;


### Determine number of dims in source cube ###

nNumDims = 0;
While( TabDim( pCube, nNumDims + 1 ) @<> '' );
  nNumDims = nNumDims + 1;
End;

If( nNumDims > 24 );
  nErrors = 1;
  sMessage = 'Cube has too many dimensions: ' | pCube | ' max 24 dims catered for, TI must be altered to accomodate.';
  If( pDebug >= 1 );
    AsciiOutput( sDebugFile, sMessage );
  EndIf;
  DataSourceType = 'NULL';
  ItemReject( sMessage );
EndIf;


### Determine dimensions in source cube (used only in export title row) ###

sDim1 = TabDim( pCube, 1 );
sDim2 = TabDim( pCube, 2 );
sDim3 = TabDim( pCube, 3 );
sDim4 = TabDim( pCube, 4 );
sDim5 = TabDim( pCube, 5 );
sDim6 = TabDim( pCube, 6 );
sDim7 = TabDim( pCube, 7 );
sDim8 = TabDim( pCube, 8 );
sDim9 = TabDim( pCube, 9 );
sDim10 = TabDim( pCube, 10 );
sDim11 = TabDim( pCube, 11 );
sDim12 = TabDim( pCube, 12 );
sDim13 = TabDim( pCube, 13 );
sDim14 = TabDim( pCube, 14 );
sDim15 = TabDim( pCube, 15 );
sDim16 = TabDim( pCube, 16 );
sDim17 = TabDim( pCube, 17 );
sDim18 = TabDim( pCube, 18 );
sDim19 = TabDim( pCube, 19 );
sDim20 = TabDim( pCube, 20 );
sDim21 = TabDim( pCube, 21 );
sDim22 = TabDim( pCube, 22 );
sDim23 = TabDim( pCube, 23 );
sDim24 = TabDim( pCube, 24 );


### Assign Datasource ###

NValue = 0;
SValue = '0';
Value_is_String = 0;

If( pView @= '' );
  # Create view
  pView = '}' | cProcess;
  If( ViewExists( pCube, pView ) = 0 );
    ViewCreate( pCube, pView );
  EndIf;
EndIf;

DataSourceType = 'VIEW';
DatasourceNameForServer = pCube;
DatasourceNameForClient = pCube;
DatasourceCubeView = pView;

ViewExtractSkipCalcsSet( pCube, pView, pSkipCalcValues );
ViewExtractSkipRuleValuesSet( pCube, pView, pSkipRuleValues );
ViewExtractSkipZeroesSet( pCube, pView, pSkipNullValues );


### End Prolog ###
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****


#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****




#####################################################################################
##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##
#####################################################################################


### Check for error in prolog ###

If( nErrors <> 0 );
  ProcessBreak;
EndIf;


If( pDebug <= 1 );

  ### Check whether to write title records ###

  nRecordCount = nRecordCount + 1;

  If( nRecordCount = 1 & pTitleRecord = 1 );

    If( pSkipCalcValues = 1 );
      sExportCond = ' SkipCalcs=True ';
    Else;
      sExportCond = ' SkipCalcs=False ';
    EndIf;

    If( pSkipRuleValues = 1 );
      sExportCond = sExportCond | 'SkipRules=True ';
    Else;
      sExportCond = sExportCond | 'SkipRules=False ';
    EndIf;

    If( pSkipNullValues = 1 );
      sExportCond = sExportCond | 'SkipNull=True';
    Else;
      sExportCond = sExportCond | 'SkipNull=False';
    EndIf;

    AsciiOutput( sFile, 'Export from cube: ' | pCube | ' view: ' | pView | '. On ' | DATE( NOW, 1 ) | ' at ' | TIME | sExportCond );

    If( nNumDims = 2 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, 'Value' );
    ElseIf( nNumDims = 3 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, 'Value' );
    ElseIf( nNumDims = 4 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, 'Value' );
    ElseIf( nNumDims = 5 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, 'Value' );
    ElseIf( nNumDims = 6 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, 'Value' );
    ElseIf( nNumDims = 7 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, 'Value' );
    ElseIf( nNumDims = 8 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, 'Value' );
    ElseIf( nNumDims = 9 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, 'Value' );
    ElseIf( nNumDims = 10 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, 'Value' );
    ElseIf( nNumDims = 11 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, 'Value' );
    ElseIf( nNumDims = 12 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, 'Value' );
    ElseIf( nNumDims = 13 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, 'Value' );
    ElseIf( nNumDims = 14 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,
                   sDim14, 'Value' );
    ElseIf( nNumDims = 15 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,
                   sDim14, sDim15, 'Value' );
    ElseIf( nNumDims = 16 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,
                   sDim14, sDim15, sDim16, 'Value' );
    ElseIf( nNumDims = 17 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,
                   sDim14, sDim15, sDim16, sDim17, 'Value' );
    ElseIf( nNumDims = 18 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,
                   sDim14, sDim15, sDim16, sDim17, sDim18, 'Value' );
    ElseIf( nNumDims = 19 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,
                   sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, 'Value' );
    ElseIf( nNumDims = 20 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,
                   sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, 'Value' );
    ElseIf( nNumDims = 21 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,
                   sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, 'Value' );
    ElseIf( nNumDims = 22 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,
                   sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, 'Value' );
    ElseIf( nNumDims = 23 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,
                   sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, sDim23, 'Value' );
    ElseIf( nNumDims = 24 );
      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,
                   sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, sDim23, sDim24, 'Value' );
    EndIf;
  EndIf;


  ### Write data from source cube to export file ###

  # Selects the correct AsciiOutput formula depending upon the number of dimensions in the cube

  If( nNumDims = 2 );
    AsciiOutput( sFile, pCube, v1, v2, SValue );
  ElseIf( nNumDims = 3 );
    AsciiOutput( sFile, pCube, v1, v2, v3, SValue );
  ElseIf( nNumDims = 4 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, SValue );
  ElseIf( nNumDims = 5 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, SValue );
  ElseIf( nNumDims = 6 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, SValue );
  ElseIf( nNumDims = 7 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, SValue );
  ElseIf( nNumDims = 8 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, SValue );
  ElseIf( nNumDims = 9 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, SValue );
  ElseIf( nNumDims = 10 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, SValue );
  ElseIf( nNumDims = 11 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, SValue );
  ElseIf( nNumDims = 12 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, SValue );
  ElseIf( nNumDims = 13 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, SValue );
  ElseIf( nNumDims = 14 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, SValue );
  ElseIf( nNumDims = 15 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, SValue );
  ElseIf( nNumDims = 16 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, SValue );
  ElseIf( nNumDims = 17 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, SValue );
  ElseIf( nNumDims = 18 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, SValue );
  ElseIf( nNumDims = 19 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, SValue );
  ElseIf( nNumDims = 20 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, SValue );
  ElseIf( nNumDims = 21 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,
                 SValue );
  ElseIf( nNumDims = 22 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,
                 v22, SValue );
  ElseIf( nNumDims = 23 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,
                 v22, v23, SValue );
  ElseIf( nNumDims = 24 );
    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,
                 v22, v23, v24, SValue );
  EndIf;

EndIf;


### End Data ###
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****




#####################################################################################
##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##
#####################################################################################


### Initialise Debug ###

If( pDebug >= 1 );

  # Set debug file name
  sDebugFile = cDebugFile | 'Epilog.debug';

  # Log errors
  If( nErrors <> 0 );
    AsciiOutput( sDebugFile, 'Errors Occurred' );
  EndIf;

  # Log finish time
  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\d-\m-\Y \h:\i:\s' ) );

EndIf;


### If errors occurred terminate process with a major error status ###

If( nErrors <> 0 );
  ProcessQuit;
EndIf;


### End Epilog ###
#endregion
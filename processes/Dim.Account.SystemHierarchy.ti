#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#LASTCHANGE Louise Davenport Initial Draft of process
#GENERALCOMMENT Build System Hierarchy based on attributes. Also Adds CF Elements where required.
#DATASOURCECOMMENT N/A
#PROLOGCOMMENT Define Variables, Loop through dimension and add to System Consolidations
#METADATACOMMENT N/A
#DATACOMMENT N/A
#EPILOGCOMMENT Add Attributes to System Consolidations

#Define Constants 
cDimName = 'Account';
cGSTAttr = 'GSTFlag';
cDRCRAttr = 'DebitCreditFlag';
cAccountAttr = 'AccountFlag';
cRelatedAttr = 'Related Account';
cDR = 'DR';
cCR = 'CR';
cY = 'Y';
cPL = 'PL';
cBS = 'BS';
cBAL = 'BAL';
cGST = 'GST';
cAP = 'AP';
cAR = 'AR';
cTypeAttr = 'Type';
sCubeName = 'Financials';

cALLConsol = 'Account Consolidations';
cRepConsol = 'Reporting';
cSYSConsol = 'SYSTEM';
cGSTConsol = 'SYS.GST';
cSalesConsol = 'SYS.ARSales';
cExpConsol = 'SYS.APExpense';
cBSConsol = 'SYS.BSBalance';
sProcessName = '}CTK_DisconnectConsolidations';
n_Weighting = 1;


cOpCash = 'Opening Cash';
cCFConsol = 'Closing Cash';

#Validate Dimension
sDimCheck = DIMIX('}Dimensions',cDimName);
If(sDimCheck = 0);
  ItemReject('Dimension is invalid');
  ProcessBreak;
EndIf;

# Unwind System Hierarchies before rebuilding
If(DimIx(cDimName, cSalesConsol) > 0);
   If (ElcompN (cDimName, cSalesConsol) > 0);
      ExecuteProcess(sProcessName,'pDimName',cDimName,'pConsolidation',cSalesConsol);
   EndIf;
EndIf;
If(DimIx(cDimName, cExpConsol) > 0);
   If (ElcompN (cDimName, cExpConsol) > 0);
      ExecuteProcess(sProcessName,'pDimName',cDimName,'pConsolidation',cExpConsol);
   EndIf;
EndIf;
If(DimIx(cDimName, cBSConsol) > 0);
  ExecuteProcess(sProcessName,'pDimName',cDimName,'pConsolidation',cBSConsol);
EndIf;

# Ensure Consolidations Exist
If(DimIx(cDimName, cGSTConsol) = 0);
  DimensionElementInsert(cDimName,'', cGSTConsol,'C');
EndIf;
  
If(DimIx(cDimName, cSalesConsol) = 0);
  DimensionElementInsert(cDimName,'', cSalesConsol ,'C');
EndIf;

If(DimIx(cDimName, cExpConsol) = 0);
  DimensionElementInsert(cDimName,'', cExpConsol,'C');
EndIf;

If(DimIx(cDimName, cBSConsol) = 0);
  DimensionElementInsert(cDimName,'', cBSConsol,'C');
EndIf;

# Ensure Consolidations Sit under the right place
DimensionElementComponentAdd(cDimName,  cALLConsol, cRepConsol,0);
DimensionElementComponentAdd(cDimName,  cALLConsol, cSYSConsol,0);
DimensionElementComponentAdd(cDimName, cGSTConsol, cSalesConsol ,n_Weighting);
DimensionElementComponentAdd(cDimName, cGSTConsol, cExpConsol,n_Weighting *-1);
DimensionElementComponentAdd(cDimName, cSYSConsol, cGSTConsol,0);
DimensionElementComponentAdd(cDimName, cSYSConsol, cBSConsol,0);


# Add Opening Cash to Closing Cash Consol in CF
# Check that Element Exists
If(DimIx(cDimName, cOpCash) = 0);
  DimensionElementInsert(cDimName,'', cOpCash,'N');
EndIf;
DimensionElementComponentAdd(cDimName, cCFConsol, cOpCash,n_Weighting);

nDimSize = DIMSIZ(cDimName);
nIndex = 1;

# Loop through dimension and
While(nIndex <= nDimSize);
  s_Element = DimNm(cDimName, nIndex);
  # Check Element Type;
  s_Type = DType(cDimName, s_Element);
  If(s_Type @= 'N');
    # Get AccountFlag
    s_Account = AttrS(cDimName, s_Element, cAccountAttr);
    # Get DR/CR
    s_DRCR = AttrS(cDimName, s_Element, cDRCRAttr);
    # If a PL account
    If(s_Account @= cPL);
    # Get GST Flag
      s_GST = AttrS(cDimName, s_Element, cGSTAttr);
      If(s_GST @= cY);
        If(s_DRCR @= cCR);
          DimensionElementComponentAdd(cDimName, cSalesConsol, s_Element,n_Weighting);
        Else;
          DimensionElementComponentAdd(cDimName, cExpConsol, s_Element, n_Weighting);
        EndIf;
      EndIf;

    # If a BS account then need to include all but the balancing account
    ElseIf(s_Account @= cBS);
      s_AcctType = AttrS(cDimName, s_Element, cTypeAttr);
      If(s_AcctType @<> cBAL);
        If(s_DRCR @= cCR);
          n_Weight = n_Weighting *-1;
        Else;
          n_Weight = n_Weighting;
        EndIf;
        DimensionElementComponentAdd(cDimName, cBSConsol, s_Element, n_Weight);
      
      EndIf;
    EndIf;
  EndIf;
  nIndex = nIndex +1;
End;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

# Add Attributes against System Consolidations
nIndex = 1;

# Loop through dimension and
While(nIndex <= nDimSize);
  s_Element = DimNm(cDimName, nIndex);
  # Check Element Type;
  s_Type = DType(cDimName, s_Element);
  If(s_Type @= 'N');
    # Get AccountFlag
    s_Account = AttrS(cDimName, s_Element, cAccountAttr);
    # Get Type Flag
    s_AcctType = AttrS(cDimName, s_Element, cTypeAttr);
    # If a BS account then look at the type attributes
    If(s_Account @= cBS);
      If(s_AcctType @= cAR);
        # Put attribute against Account
        AttrPutS(cSalesConsol, cDimName, s_Element, cRelatedAttr);
        # Put Attribute against Consolidation
         AttrPutS(s_Element, cDimName, cSalesConsol, cRelatedAttr); 
      ElseIf(s_AcctType @= cAP);
        # Put attribute against Account
        AttrPutS(cExpConsol, cDimName, s_Element, cRelatedAttr);
        # Put Attribute against Consolidation
        AttrPutS(s_Element, cDimName, cExpConsol, cRelatedAttr);
      ElseIf(s_AcctType @= cGST);
        # Put attribute against Account
        AttrPutS(cGSTConsol, cDimName, s_Element, cRelatedAttr);
        # Put Attribute against Consolidation
        AttrPutS(s_Element, cDimName, cGSTConsol, cRelatedAttr);
      ElseIf(s_AcctType @= cBAL);
        # Put attribute against Account
        AttrPutS(cBSConsol, cDimName, s_Element, cRelatedAttr);
        # Put Attribute against Consolidation
        AttrPutS(s_Element, cDimName, cBSConsol, cRelatedAttr);
      EndIf;
    EndIf;
  EndIf;
  nIndex = nIndex +1;
End;

# Reprocess the Feeders for the Financials Cube
CubeProcessFeeders(sCubeName);

#Execute the PL Account dim process to ensure changes are replicated there also
ExecuteProcess ('Dim.PLAccount.Update') ;
#endregion
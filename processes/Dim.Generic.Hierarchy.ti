#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#LASTCHANGE Louise Davenport 23-Sep-2014 Changed Adding Elements to use direct commands
#LASTCHANGE Louise Davenport 10-Sep-2014 Fixed Process to ensure disconnetcing occurred
#LASTCHANGE Louise Davenport Clean up of process
#LASTCHANGE Peter Currie Initial Draft of process
#GENERALCOMMENT Build Hierarchy based on attributes
#DATASOURCECOMMENT N/A
#PROLOGCOMMENT N/A
#METADATACOMMENT N/A
#DATACOMMENT N/A
#EPILOGCOMMENT N/A 

# Define Constants
cDimName = pDimName;
# Hierarchy in the form of 'Hierarchy_xxx' 
cHierarchy = pHierarchy;
sHierarchyConsol = Subst(cHierarchy, 11, Long(cHierarchy) - 10);
sProcessName = '}CTK_DisconnectConsolidations';
sOpCFRecConsol = 'OpCFReconciliation';
s_NCItemConsol = 'Non Cash Items';
s_MvmtWCConsol = 'Movement in Working Capital';

sCFConsol = 'Cash Flow';
sNCFConsol = 'Net Cash Flow';
sCashMvmtConsol = 'Cash Movement';

s_ReportingConsol = 'Reporting';


########################
## Define Variables                    ##
########################
nDimSize = DIMSIZ('}Dimensions');
nIndex = 1;
sElementAttributepDimName = '}ElementAttributes_' | cDimName;


##########################
## Validate Parameters                   ##
##########################
sDimCheck = DIMIX('}Dimensions',cDimName);
If(sDimCheck = 0);
  ItemReject('Dimension is invalid');
  ProcessBreak;
EndIf;

If(cHierarchy@<>'');
  sHieCheckDim = '}ElementAttributes_' | cDimName;
  sHieCheck = DIMIX(sHieCheckDim,cHierarchy);
  If(sHieCheck = 0);
    ItemReject('Consolidation is invalid');
    ProcessBreak;
  EndIf;

  sHieCheck2 = DIMIX('}Dimensions',cDimName);
  If(SubSt(cHierarchy,1,10) @<>'Hierarchy_');
    ItemReject('Include the full element name e.g. Hierarchy_');
    ProcessBreak;
  EndIf;

EndIf;


#####################################
## Loop throught elememnts to build hierarchy        ##
#####################################
# If Hierarchy Not entered as a parameter then 	
If(cHierarchy @= '');

  # Disconnect The Reporting if doing all...
  ExecuteProcess(sProcessName,'pDimName',cDimName,'pConsolidation',s_ReportingConsol);

  #Loop through attributes to looks for "Hierarchy_"
  nDimSizAttributepDimName = DimSiz(sElementAttributepDimName);
  nIndex2 = 1;
  While(nIndex2 <= nDimSizAttributepDimName);
    sAttributeName = DimNm(sElementAttributepDimName,nIndex2);
    If(SubSt(sAttributeName,1,10) @= 'Hierarchy_');
      # First unravel each hierarchy
      sTopElement = Subst(sAttributeName, 11, Long(sAttributeName) - 10);

      # Then Loop through and Add Elements to the consolidations
      nDimSizepDimName = DimSiz(pDimName);
      nIndex3 = 1;
      While(nIndex3 <= nDimSizepDimName);
        sElement = DimNm(pDimName,nIndex3);
        sParent = AttrS(pDimName,sElement,sAttributeName);
        sWeightAttribute = 'Weight_' | SubSt(sAttributeName,11,Long(sAttributeName)-10);
        nWeight = AttrN(pDimName,sElement,sWeightAttribute);
        If(sParent @<>'');
          If(nWeight = 0);
            nWeight = 1;
          EndIf;
          DimensionElementInsertDirect(cDimName,'',sParent,'C');
          DimensionElementComponentAddDirect(cDimName,sParent,sElement,nWeight);

          #If there is no further parent specified then add to Incomplete Hierarchy Consolidation consolidation					
          #Maybe
        EndIf;
        nIndex3 = nIndex3 +1;
      End;
    EndIf;
    nIndex2 = nIndex2 +1;
  End;

# Specific Hierarchy
Else;
  #Insert top level element

  # First Unravel Hierarchy
  # If Rebuiding the Hierarchy then only disconnect parts that are specific to the hierarchy in question
  sTopElement = Subst(cHierarchy, 11, Long(cHierarchy) - 10);
  If(sTopElement @= sOpCFRecConsol);
    If(ElCompN(cDimName, s_NCItemConsol) > 0);
      ExecuteProcess(sProcessName,'pDimName',cDimName,'pConsolidation',s_NCItemConsol);
    EndIf;
    If(ElCompN(cDimName, s_MvmtWCConsol) > 0);
      ExecuteProcess(sProcessName,'pDimName',cDimName,'pConsolidation',s_MvmtWCConsol);
    EndIf;
  ElseIf(sTopElement @= sCFConsol);
    If(ElCompN(cDimName, sNCFConsol) > 0);
      ExecuteProcess(sProcessName,'pDimName',cDimName,'pConsolidation',sNCFConsol);
    EndIf;
    If(ElCompN(cDimName, sCashMvmtConsol) > 0);
      ExecuteProcess(sProcessName,'pDimName',cDimName,'pConsolidation',sCashMvmtConsol);
    EndIf;
  Else;
    If(DimIx(cDimName, sTopElement) > 0);
      If(ElCompN(cDimName, sTopElement) > 0);
        ExecuteProcess(sProcessName,'pDimName',cDimName,'pConsolidation',sTopElement);
      EndIf;
    EndIf;
  EndIf;

  nDimSizepDimName = DimSiz(pDimName);
  nIndex1 = 1;
  While(nIndex1 <= nDimSizepDimName);
    sElement = DimNm(pDimName,nIndex1);
    sParent = AttrS(pDimName,sElement,pHierarchy);
    sWeightAttribute = 'Weight_' | SubSt(pHierarchy,11,Long(pHierarchy)-10);
    nWeight = AttrN(pDimName,sElement,sWeightAttribute);
    If(sParent @<>'');
      If(nWeight = 0);
        nWeight = 1;
      EndIf;
      DimensionElementInsertDirect(cDimName,'',sParent,'C');
      DimensionElementComponentAddDirect(cDimName,sParent,sElement,nWeight);
      #If there is no further parent specified then add to Incomplete Hierarchy Consolidation consolidation					
      #Maybe
    EndIf;
    nIndex1 = nIndex1 +1;
  End;
EndIf;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

#####################################################
## Run process to Rebuild System Consolidations if Account Dimension     ##
#####################################################
If(pDimName @= 'Account');
  ExecuteProcess('Dim.Account.SystemHierarchy');
EndIf;

#####################################################
## Run process to sort order                                                                         ##
#####################################################
ExecuteProcess('Dim.Generic.OrderHierarchy', 'pDimName', pDimName);


#####################################################
## If Account Dim update apply Sort and PL Account                                   ##
#####################################################
If(pDimName @= 'Account');
  ExecuteProcess('Dim.Account.SortOrder','pDim',pDimName);
  # Then update the PL Account Hierarchy which is based on the PL part of the Account Hierarchy
  ExecuteProcess('Dim.PLAccount.Update');
EndIf;


#####################################################
## Run process to Check whether elements exist in hierarchy                      ##
#####################################################
ExecuteProcess('Dim.Generic.HierarchyCheck', 'pDimName', pDimName, 'pHierarchy', pHierarchy);


#endregion
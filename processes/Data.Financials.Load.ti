#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#LASTCHANGE Louise Davenport 6-Jun-2014 
#LASTCHANGE Louise Davenport 26-May-2014 Update Data Tab for generic treatment 
#LASTCHANGE Peter CurrieUpdate Load File
#GENERALCOMMENT Load Trial Balance  to Financials cube
#DATASOURCECOMMENT Trial Balance CSV
#PROLOGCOMMENT Cube ZeroOut
#METADATACOMMENT N/A
#DATACOMMENT Load CSV
#EPILOGCOMMENT Tidy Objects


###########################
## Define Constants                         ##
###########################
cDestinationCube = 'Financials';
sDVCube = '}DataValidation_' | cDestinationCube ;
s_FilePath = pFilePath;
s_FileName = pFileName;
s_DataFile = s_FilePath | '\' | s_FileName;
s_Source = s_DataFile;
sName = GetProcessName();
vProcess = '}CTK_ViewCall';

# Validate Parameter Inputs
sVersion = pVersion;
sPeriod = pPeriod|'.FY';
s_DRCRAttr = 'DebitCreditFlag';
sAcctFlagAttr = 'AccountFlag';
sAccountDim = 'Account';

sMeasure = 'Amount';
sReportType = pReportingType;

sVersionDim = 'Version';
sPeriodDim = 'Period';
sReportTypeDim = 'Report Type';
sMeasureDim = 'Financial Measure';
sEntityDim = 'Entity';

sNoEntity = 'No Entity';
sCYAttr = 'CY Earnings Account';
sDefCYAcct = AttrS(sEntityDim, sNoEntity, sCYAttr);

sDVMeasure = 'Has Actuals' ;
sNoProject = 'No Project' ;

###########################
## Parameter Validation Checking    ##
###########################
# Chect that the Version exists
sVersionCheck = DIMIX('Version',sVersion);
If(sVersionCheck = 0);
  nBreakFlag =1;
  ItemReject('Version is invalid');
EndIf;

# Check that the Period Exists
nPeriodCheck = DIMIX(sPeriodDim,sPeriod);
If(nPeriodCheck = 0);
  nBreakFlag =1;
  ItemReject('Period is invalid');
EndIf;

nPeriodCheckLong = Long(pPeriod);
If(nPeriodCheckLong <> 4);
  nBreakFlag =1;
  ItemReject('Period Should be in format YYYY');
EndIf;

n_FileCheck = FileExists(s_DataFile);
If(n_FileCheck = 0);
  nBreakFlag =1;
  ItemReject('Source File does not exist');
EndIf;

nReportTypeCheck = DimIx(sReportTypeDim, pReportingType);
If(nReportTypeCheck = 0);
  nBreakFlag =1;
  ItemReject('Report Type in Invalid');
EndIf;


sPeriod = pPeriod | '.13.LTD-NElements';

##############################
## Turn off Cube Logging                        ##
############################## 
CubeSetLogChanges(cDestinationCube, 0);

# Validate Parameter Inputs
If(nBreakFlag <> 1);

# Use the cortell toolkit processes }CTK_ViewCall to define the section of the cube to zero out
# the vStr variable defines all the dimensional point we limit to zero, e.g. only version actual, only the year specified in the parameter 
# and only the company specified in the parameter and only the measure amount (to prevent clearing any manual entries)

  vStr = cDestinationCube|','|sVersionDim|','|sVersion|','|sPeriodDim|','|sPeriod|','|sReportTypeDim|','|pReportingType|','|sMeasureDim|','|sMeasure;

# Execution of the zero out process
  pOpt = 'Zero_'|sName;
  ExecuteProcess(vProcess,'pOpt',pOpt,'pStr',vStr);

# Uncomment the below line to test if the zero out clears the area it should
# processbreak;

EndIf;


####################################
## Reset Process Data Source                              ##
####################################
DataSourceNameForServer = s_Source;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

# Validate Parameter Inputs
If(nBreakFlag = 1);
  ProcessBreak;
EndIf;
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

##############################
## Define Variables                                  ##
##############################
# Need to determine when to use parameters, as this is a csv, the datasource cant be trusted to be correct
# Dimension elements may need to be determined from a single column.
# sEntity = SUBST(Account,1,3);
# sCostCentre = SUBST(Account,4,3);
# sPLAccount = SUBST(Account,8,5);
sDestinationCube = cDestinationCube;
sVersion = vVersion;


# The Period dimension is a structure made up of a Financial Year consolidation and Year.MM month elements
# e.g. '2014.FY' -> '2014.01'
# Any date will need to be converted to YYYY.MM format
#sPeriod =  SUBST(vPeriod,7,4) | '.' | SUBST(vPeriod,1,2);
If(long(vPeriod) =1);
  vPeriod = '0' | vPeriod;
EndIf;

sPeriod = vFiscalYear | '.' | vPeriod;

sEntity = vEntityID;
If(sEntity @= '');
  sEntity = 'Unspec Entity';
EndIf;

sCostCentre = vCostcentre;
If(sCostCentre @= '');
  sCostCentre = 'Unspec Cost Centre';
EndIf;

sProject = vProjectID;
If(sProject @= '');
  sProject = 'Unspec Project';
EndIf;

sCurrency = vCurrency;
sAccount = vAccountID;

nValue = vAmount;

# Determine CY Earnings Account
sCYAcct = AttrS(sEntityDim, sEntity, sCYAttr);
If(sCYAcct @= '');
  sCYAcct = sDefCYAcct;
EndIf;

sAcctType = AttrS(sAccountDim, sAccount, sAcctFlagAttr);

## Validate Parameter Inputs
# Error out with warning if incorrect parameter is specified
# TBC
If(pVersion @<> vVersion);
  ItemReject('Version parameter does not match source data');
  ItemSkip;
EndIf;

sPeriodCheck = SubSt(pPeriod,1,4);
If(sPeriodCheck @<> vFiscalYear);
  ItemReject('Period parameter does not match source data');
  ItemSkip;
EndIf;

## Determine the account signage
# Based on the DR & CR
s_DRCR = AttrS(sAccountDim, sAccount, s_DRCRAttr);
If(s_DRCR @= 'CR');
  nWeighting = -1;
Else;
  nWeighting = 1;
EndIf;

##################################
## Write to Cube                                               ##
##################################
# Load Data against its account
nMovement = nWeighting * nValue;
If(CellIsUpdateable(sDestinationCube,sVersion,sPeriod,sEntity,sCostCentre,sProject,sCurrency,sReportType,sAccount,sMeasure) = 1);
  nTemp = CellGetN(sDestinationCube,sVersion,sPeriod,sEntity,sCostCentre,sProject,sCurrency,sReportType,sAccount,sMeasure);
  CellPutN(nTemp + nMovement,sDestinationCube,sVersion,sPeriod,sEntity,sCostCentre,sProject,sCurrency,sReportType,sAccount,sMeasure);
EndIf;

# Populate the Current Year Earnings in BS
If(sAcctType @= 'PL');
  n_Value = nValue *-1 + CellGetN(sDestinationCube,sVersion,sPeriod,sEntity,sCostCentre,sProject,sCurrency,sReportType,sCYAcct,sMeasure);
  CellPutN(n_Value, sDestinationCube,sVersion,sPeriod,sEntity,sCostCentre,sProject,sCurrency,sReportType,sCYAcct,sMeasure);
EndIf;

############################################
## Load }DataValidation cube with 1 for valid combinations    ##
############################################
nValue = 1;
CellPutN (nValue, sDVCube, sEntity, sCostCentre, sProject, sAccount, sDVMeasure) ;

#Load against 'No Project' 
CellPutN (nValue, sDVCube, sEntity, sCostCentre, sNoProject, sAccount, sDVMeasure) ;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

##############################
# Set cube logging to original value         ##
##############################
CubeSetLogChanges(cDestinationCube, 1);


# Validate Parameter Inputs
If(nBreakFlag <> 1);
  # Remove Temp Objects
  # Execution of the zero out process
  pOpt = 'Destroy_'|sName;
  ExecuteProcess(vProcess,'pOpt',pOpt, 'pStr',vStr);
Endif;

# Validate Parameter Inputs
If(nBreakFlag = 1);
  ProcessError;
EndIf;
#endregion
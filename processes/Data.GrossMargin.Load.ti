#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#LASTCHANGE Inel Peacock, 2014-12-11, Initial setup of process
#GENERALCOMMENT Load base data into Gross Margin cube for selected version
#DATASOURCECOMMENT CSV file
#PROLOGCOMMENT Defines variables, clears out existing data in cube
#METADATACOMMENT N/A
#DATACOMMENT Load CSV
#EPILOGCOMMENT Tidy Objects


###########################
## Define Constants                         ##
###########################
sDestinationCube = 'Gross Margin';
s_FilePath = pFilePath;
s_FileName = pFileName;
s_DataFile = s_FilePath | '\' | s_FileName;
s_Source = s_DataFile;
sName = GetProcessName();
sProcess = '}CTK_ViewCall';

# Validate Parameter Inputs
sVersion = pVersion;
sPeriod = pPeriod|'.FY';

sReportType = pReportingType;

sVersionDim = 'Version';
sPeriodDim = 'Period';
sReportTypeDim = 'Report Type';
sMeasureDim = 'GM Measure' ;
sMeasureSub = 'SYS.To Clear' ;
sMeasureMDX = '{FILTER( {TM1DRILLDOWNMEMBER( {[GM Measure].[SYS.ToClear]}, ALL, RECURSIVE )}, [GM Measure].[Data entry] = "Y")}' ;

If (SubsetExists(sMeasureDim,sMeasureSub)=1);
  SubsetDestroy (sMeasureDim,sMeasureSub);
EndIf;
SubsetCreateByMDX (sMeasureSub, sMeasureMDX) ;

sMeasureAttr = 'Data Entry' ;
sEntityDim = 'Entity';

sNoEntity = 'No Entity';

###########################
## Parameter Validation Checking    ##
###########################
# Chect that the Version exists
sVersionCheck = DIMIX('Version',sVersion);
If(sVersionCheck = 0);
  nBreakFlag =1;
  ItemReject('Version is invalid');
EndIf;

# Check that the Period Exists
nPeriodCheck = DIMIX(sPeriodDim,sPeriod);
If(nPeriodCheck = 0);
  nBreakFlag =1;
  ItemReject('Period is invalid');
EndIf;

nPeriodCheckLong = Long(pPeriod);
If(nPeriodCheckLong <> 4);
  nBreakFlag =1;
  ItemReject('Period Should be in format YYYY');
EndIf;

n_FileCheck = FileExists(s_DataFile);
If(n_FileCheck = 0);
  nBreakFlag =1;
  ItemReject('Source File does not exist');
EndIf;

nReportTypeCheck = DimIx(sReportTypeDim, pReportingType);
If(nReportTypeCheck = 0);
  nBreakFlag =1;
  ItemReject('Report Type in Invalid');
EndIf;

sPeriod = pPeriod | '.13.LTD-NElements';

##############################
## Turn off Cube Logging                        ##
############################## 
CubeSetLogChanges(sDestinationCube, 0);

# Validate Parameter Inputs
If(nBreakFlag <> 1);

# Use the Cortell toolkit processes }CTK_ViewCall to define the section of the cube to zero out
# the vStr variable defines all the dimensional point we limit to zero, e.g. only version actual, only the year specified in the parameter 
# and only the company specified in the parameter and only the measure amount (to prevent clearing any manual entries)

  vStr = sDestinationCube|','|sVersionDim|','|sVersion|','|sPeriodDim|','|sPeriod|','|sReportTypeDim|','|pReportingType|','|sMeasureDim|','|sMeasureSub;

# Execution of the zero out process
  pOpt = 'Zero_'|sName;
  ExecuteProcess(sProcess,'pOpt',pOpt,'pStr',vStr);

# Uncomment the below line to test if the zero out clears the area it should
# processbreak;

EndIf;

#PROCESSQUIT ;

####################################
## Reset Process Data Source                              ##
####################################
DataSourceNameForServer = s_Source;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

sDataEntryFlag = Attrs (sMeasureDim, vGMMeasure, sMeasureAttr) ;

If (sDataEntryFlag@='');
  ItemSkip ;
EndIf ;

## If Customer field is blank, populate against unspec customer
If (vCustomer@='') ;
  sCustomer = 'Unspec Customer' ;
Else;
  sCustomer = vCustomer ;
EndIf;

## If Product field is blank, populate against unspec product
If (vProduct@='') ;
  sProduct = 'Unspec Product' ;
Else;
  sProduct = vProduct ;
EndIf;

## If Classification field is blank, populate against unspec classification
If (vClassification@='') ;
  sClassification = 'Unspec Classification' ;
Else;
  sClassification = vClassification ;
EndIf;

If (Long (NumberToString(vPeriod))=1);
  sPeriod = NumberToString(vYear) | '.0' | NumberToString(vPeriod) ;
Else ;
  sPeriod = NumberToString(vYear) | '.' | NumberToString(vPeriod) ;
EndIf;

If (CellIsUpdateable (sDestinationCube, pVersion, sPeriod, vEntity, vCostCentre, vCurrency, pReportingType, sClassification, sCustomer, sProduct, vGMMeasure) = 1 );
  nCurrVal = CellGetN (sDestinationCube, pVersion, sPeriod, vEntity, vCostCentre, vCurrency, pReportingType, sClassification, sCustomer, sProduct, vGMMeasure) ;
  CellPutN (nCurrVal + vValue, sDestinationCube, pVersion, sPeriod, vEntity, vCostCentre, vCurrency, pReportingType, sClassification, sCustomer, sProduct, vGMMeasure) ;
EndIf ;


#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
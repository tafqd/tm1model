#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#LASTCHANGE Louise Davenport 10-Sep-2014 Initial Draft of process
#GENERALCOMMENT Load Personnel Info at as per Payroll Info
#DATASOURCECOMMENT Payroll CSV
#PROLOGCOMMENT Cube ZeroOut
#METADATACOMMENT Adds new employees as required
#DATACOMMENT Load CSV
#EPILOGCOMMENT Tidy Objects

###########################
## Define Constants                         ##
###########################
cDestinationCube = 'Personnel';
s_FilePath = pFilePath;
s_FileName = pFileName;
s_DataFile = s_FilePath | '\' | s_FileName;
s_Source = s_DataFile;
sName = GetProcessName();
vProcess = '}CTK_ViewCall';

sVersion = pVersion;
sPeriod = pPeriod|'.Input';
sReportType = 'Local';


sVersionDim = 'Version';
sPeriodDim = 'Period';
sReportTypeDim = 'Report Type';
sEntityDim = 'Entity';
sPersonnelDim = 'Personnel List';
sMeasureDim = 'Personnel Measure';

sCcyAttr = 'Default Currency';
sNoEntity = 'No Entity';
sDefCcy = AttrS(sEntityDim, sNoEntity, sCCyAttr);
sPersonConsol = 'Existing Employees';
sCodeDescAttr = 'Code and Description';

# Standard hours for FTE conversion:
nStdHours = 40;

s_CentralCheck = CellGetS('Assumptions', 'No Version', 'No Period', 'No Entity', 'No Currency', 'Personnel – centrally planned', 'String');
s_PersonnelCostCentre = 'Personnel Cost Centre';
sNoPeriod = 'No Period';


############################
## Validate Parameter Inputs              ##
############################
# Error out with warning if incorrect parameter is specified
# TBC

sVersionCheck = DIMIX(sVersionDim,sVersion);
If(sVersionCheck = 0);
  nBreakFlag =1;
  ItemReject('Version is invalid');
EndIf;

nPeriodCheck = DIMIX(sPeriodDim,sPeriod);
If(nPeriodCheck = 0);
  nBreakFlag =1;
  ItemReject('Period is invalid');
EndIf;

nPeriodCheckLong = Long(pPeriod);
If(nPeriodCheckLong <> 4);
  nBreakFlag =1;
  ItemReject('Period Should be in format YYYY');
EndIf;

n_FileCheck = FileExists(s_DataFile);
If(n_FileCheck = 0);
  nBreakFlag =1;
  ItemReject('Source File does not exist');
EndIf;


####################################################
## Disable cube logging for bulk data loads - performance improvements  ##
####################################################
cCubeLogging = CubeGetLogChanges(cDestinationCube);
CubeSetLogChanges(cDestinationCube, 0);


#############################
## Validate Parameter Inputs                ##
############################
If(nBreakFlag <> 1);
  # Use the cortell toolkit processes }CTK_ViewCall to define the section of the cube to zero out
  # the vStr variable defines all the dimensional point we limit to zero, e.g. only version actual, only the year specified in the parameter 
  # and only the company specified in the parameter and only the measure amount (to prevent clearing any manual entries)
  # anything which is not specified will be cleared completly (data clear, dimension structures not affected)


  vStr = cDestinationCube|','|sVersionDim|','|sVersion|','|sPeriodDim|','|sPeriod|','|sReportTypeDim|','|sReportType;

  # Execution of the zero out process
  pOpt = 'Zero_'|sName;
  ExecuteProcess(vProcess,'pOpt',pOpt,'pStr',vStr);

  # Uncomment the below line to test if the zero out clears the area it should
  # processbreak;

EndIf;


####################################
## Reset Process Data Source                              ##
####################################
DataSourceNameForServer = s_Source;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

If(vEmpID @= '');
  ItemSkip;
EndIf;

If(DimIx(sPersonnelDim, vEmpID) = 0);
  DimensionElementInsert(sPersonnelDim, '', vEmpID, 'N');
  DimensionElementComponentAdd(sPersonnelDim, sPersonConsol, vEmpID, 1);
EndIf;

  


#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

#####################################
## Define Variables                                                  ##
#####################################
If(vEmpID @= '');
  ItemSkip;
EndIf;

# Need to determine when to use parameters, as this is a csv, the datasource cant be trusted to be correct
# Dimension elements may need to be determined from a single column.

sEntity = vEntityID;
If(sEntity @= '');
  sEntity = 'Unspec Entity';
EndIf;

sCostCentre = vCostcentreID;
If(sCostCentre @= '');
  sCostCentre = 'Unspec Cost Centre';
EndIf;

If(s_CentralCheck @= 'Yes');
  sAllocCC = sCostCentre;
  sCostCentre = s_PersonnelCostCentre;
EndIf;

sProject = vProjectID;
If(sProject @= '');
  sProject = 'Unspec Project';
EndIf;

sCurrency = AttrS(sEntityDim, sEntity, sCcyAttr);
If(sCurrency @= '');
  sCurrency = sDefCcy;
EndIf;

nFTE = vWeekHours \ nStdHours;

# Convert Start date to excel number
nStartDate = DayNo(vStartDate) +21916;


############################################
## Add Attributes                                                                      ##
############################################
sCodeDesc = vEmpID | ' - ' |  vEmpName;
AttrPutS(sCodeDesc, sPersonnelDim, vEmpID, sCodeDescAttr);


############################################
## Write to Cube                                                                      ##
############################################
# Load FTE 
sMeasure = 'FTE';
nValue = nFTE;
CellPutN(nValue, cDestinationCube, pVersion, sPeriod, sEntity, sCostCentre,sProject,sCurrency,sReportType, vEmpID, sMeasure);

# Load Start Date
sMeasure = 'Start Date';
nValue = nStartDate;
CellPutN(nValue, cDestinationCube, pVersion, sPeriod, sEntity, sCostCentre,sProject,sCurrency,sReportType, vEmpID, sMeasure);

# Load Base Salary - full time equivalent amount
sMeasure = 'Base Salary';
nValue = vBaseSalary;
CellPutN(nValue, cDestinationCube, pVersion, sPeriod, sEntity, sCostCentre,sProject,sCurrency,sReportType, vEmpID, sMeasure);

# Load Salary 1 Percentage
sMeasure = 'Salary % 1';
nValue = vSal1Percent;
CellPutN(nValue, cDestinationCube, pVersion, sPeriod, sEntity, sCostCentre,sProject,sCurrency,sReportType, vEmpID, sMeasure);

# Load Salary 2 Percentage
sMeasure = 'Salary % 2';
nValue = vSal2Percent;
CellPutN(nValue, cDestinationCube, pVersion, sPeriod, sEntity, sCostCentre,sProject,sCurrency,sReportType, vEmpID, sMeasure);

# Load Salary 3 Percentage
sMeasure = 'Salary % 3';
nValue = vSal3Percent;
CellPutN(nValue, cDestinationCube, pVersion, sPeriod, sEntity, sCostCentre,sProject,sCurrency,sReportType, vEmpID, sMeasure);

# Load Benefit Fixed 1
sMeasure = 'Benefit Fixed 1';
nValue = vFixedBen1;
CellPutN(nValue, cDestinationCube, pVersion, sPeriod, sEntity, sCostCentre,sProject,sCurrency,sReportType, vEmpID, sMeasure);

# Load Benefit Fixed 2
sMeasure = 'Benefit Fixed 2';
nValue = vFixedBen2;
CellPutN(nValue, cDestinationCube, pVersion, sPeriod, sEntity, sCostCentre,sProject,sCurrency,sReportType, vEmpID, sMeasure);

# Load Benefit 3 Flag
sMeasure = 'Flag – Benefit 3';
nValue = vBen3Flag;
CellPutN(nValue, cDestinationCube, pVersion, sPeriod, sEntity, sCostCentre,sProject,sCurrency,sReportType, vEmpID, sMeasure);

# Load Benefit 4 Flag
sMeasure = 'Flag – Benefit 4';
nValue = vBen4Flag;
CellPutN(nValue, cDestinationCube, pVersion, sPeriod, sEntity, sCostCentre,sProject,sCurrency,sReportType, vEmpID, sMeasure);


## If Centralised Planning then Load the Allocated CostCentre into there against No period
If(s_CentralCheck @= 'Yes');
  sMeasure = 'Cost Centre';
  CellPutS(sAllocCC, cDestinationCube, pVersion, sNoPeriod, sEntity, sCostCentre,sProject,sCurrency,sReportType, vEmpID, sMeasure);
EndIf;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

# Set cube logging to original value
CubeSetLogChanges(cDestinationCube, cCubeLogging);

# Validate Parameter Inputs
If(nBreakFlag <> 1);
  # Remove Temp Objects
  # Execution of the zero out process
  pOpt = 'Destroy_'|sName;
  ExecuteProcess(vProcess,'pOpt',pOpt,'pStr',vStr);
Endif;

# Validate Parameter Inputs
If(nBreakFlag = 1);
  ProcessError;
EndIf;
#endregion
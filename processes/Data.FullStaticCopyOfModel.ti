#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

#LASTCHANGE Inel Peacock, 2015-03-18, updated process to limit to years added as parameters
#LASTCHANGE Inel Botha, updated process to use }CTK process
#GENERALCOMMENT Uses }CTK_ViewCopyAll to create a full static copy of a specific version
#DATASOURCECOMMENT
#PROLOGCOMMENT Triggers }CTK_ViewCopyAll process to copy version data to the specified static version
#METADATACOMMENT
#DATACOMMENT
#EPILOGCOMMENT

##########################################################
## Define variables                                                                                                   ##
##########################################################
sVersionDim = 'Version' ;
sProcess = '}CTK_ViewCopyAll' ;

sCubeDim = '}Cubes' ;
sCubeSub = 'SYS.CubesToCopy' ;

sYearDim = 'Period' ;
##########################################################
## Validate Parameters                                                                                              ##
##########################################################

If (DIMIX(sVersionDim,pVersionFrom)=0);
  ItemReject(pVersionFrom|' is an invalid version.');
  ProcessError;
Endif;

If (DIMIX(sVersionDim,pVersionTo)=0);
  ItemReject(pVersionTo|' is an invalid version.');
  ProcessError;
Endif;

If (ELISANC(sVersionDim,'Dynamic Versions',pVersionTo)>0 % pVersionTo@='Actual');
  ItemReject(pVersionTo|' is a dynamic version. Please select a static version to copy to');
  ProcessError;
Endif;

##########################################################
## Create subset of cubes to copy                                                                            ##
##########################################################
sCubeMDX = '{INTERSECT({EXCEPT({TM1SUBSETALL( [}Cubes] )},{[}Cubes].[Metrics],[}Cubes].[Allocations],[}Cubes].[Allocation Assumptions],[}Cubes].[Allocation Definitions]})},{EXCEPT({TM1SUBSETALL( [}Cubes] )},{TM1FILTERBYPATTERN( {TM1SUBSETALL( [}Cubes] )}, "*}*")} )})}' ;

If(SubsetExists (sCubeDim, sCubeSub)=0);
  SubsetCreateByMDX (sCubeSub, sCubeMDX) ;
EndIf ;

##########################################################
## Call Process                                                                                                          ##
##########################################################
nStartYear = StringToNumber (Subst(DimensionElementPrincipalName (sYearDim, pYearFrom),1,4))  ;

If (pYearTo@='') ;
  nEndYear = nStartYear ;
Else ;
  nEndYear = StringToNumber (Subst (DimensionElementPrincipalName (sYearDim, pYearTo) ,1, 4)) ;
EndIf ;

nCubes = SubsetGetSize(sCubeDim, sCubeSub) ;

While (nStartYear <= nEndYear) ;
  x = 1 ;

  While (x <= nCubes) ;

     sCube = SubsetGetElementName (sCubeDim, sCubeSub, x) ;
     sStartYear = NumberToString(nStartYear) ;

     ExecuteProcess(
     sProcess,
     'vCube',sCube,
     'pDim1',sVersionDim,
     'pDim1ElementFrom',pVersionFrom,
     'pDim1ElementTo',pVersionTo,
     'pDim2',sYearDim,
     'pDim2ElementFrom',sStartYear,
     'pDim2ElementTo',sStartYear,
     'pDim3','',
     'pDim3ElementFrom','',
     'pDim3Elementto','',
     'pDim4','',
     'pDim4ElementFrom','',
     'pDim4ElementTo','',
     'pBatchUpdates','n',
     'pSkipRules','n',
     'pClearOutOnly','n');

    x = x +1 ;

  End ;

  nStartYear = nStartYear +1 ;
End ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


#endregion
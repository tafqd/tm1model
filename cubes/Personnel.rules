#Region System
FEEDSTRINGS;
SKIPCHECK;
#EndRegion

#Region STET Versions
#Name Stet Versions & Periods
#Desc Stet Rules from applying to various things
#Date June-2014
#Author Louise Davenport
#Group Stet Rules
#Stet anything but Dynamic Versions
[]=N:
	IF(ELISANC('Version', 'Dynamic Versions',!Version)=0,
		STET,
	CONTINUE);
# Stet certain measures
#[{'Rate Override','Opening WIP','Depreciation Start Period'}]=N:STET;
#EndRegion

#Region Turn model on / off
#Name Turn model on / off
#Desc Turn model on / off based on setup assumption
#Date November-2014
#Author Inel Peacock
#Group Stet Rules
[] = N:
sAss = 'Ass';
sAssumptions = sAss | 'umptions';
IF (DB(								,!Version, 'No Period','No Entity','No Currency', 'Personnel Model On','String')@='Yes',
	Continue,
	STET) ;
#EndRegion

#Region Conversion from Local to Group
#Name Calculate Group
#Desc Convert Local Numbers to Group Reporting Currency
#Date June-2014
#Author Louise Davenport
#Group Local to Group Conversion
[ReportType:'Converted'] =N:
	# Don't make them have to enter a 1 when there is only one currency and populate into the reporting Currency
	 IF(!Currency @= DB('Assumptions', 'No Version','No Period', 'No Entity', 'No Currency', 'Reporting Currency', 'String'),
	   ['Local'],
	   ['Local']
	   \ DB('Assumptions', !Version,!Period, 'No Entity', !Currency, 'Exchange Rate', 'Value')
	);

[ReportType:'Group']= N:
	# Don't make them have to enter a 1 when there is only one currency and populate into the reporting Currency
	 IF(!Currency @= DB('Assumptions', 'No Version','No Period', 'No Entity', 'No Currency', 'Reporting Currency', 'String'),
		['All Currencies','Converted'],
	 CONTINUE);
#EndRegion

#Region STET Group
#Name Stet Group Report Type
#Desc Stet Rules below from applying to group (apply to local)
#Date June-2014
#Author Louise Davenport
#Group Stet Rules
#Stet anything but Local
[]=N:
	IF(!ReportType @<> 'Local',
		STET,
	CONTINUE);
#EndRegion

#Region Start and End Dates
#Name Start and End Dates
#Desc Convert String Dates to Numbers
#Date June-2014
#Author Louise Davenport
#Group Date Rules
['No Period',{'Start Date','End Date'}]=N:
	IF(	DB('Personnel',!Version,!Period,!Entity,!Cost Centre, !Project, !Currency, !ReportType, !Personnel List, 'System '|!Personnel Measure)@<>'',
		DayNo(DB('Personnel',!Version,!Period,!Entity,!Cost Centre, !Project, !Currency, !ReportType, !Personnel List, 'System '|!Personnel Measure))+21916,
	CONTINUE);
#EndRegion

#Region FTE Calculations
#Name Stet FTEs
#Desc Stet Rules below from applying to group (apply to local)
#Date June-2014
#Author Louise Davenport
#Group Stet Rules
# Make sure FTE for input is not ruled
['FTE'] = N:
	IF(ELISANC('Period','Planning Years',!Period) = 1,
		CONTINUE,
	STET);

#Populate FTE based on Start and End Dates
# IF no Start or end date assume to populate all periods - contine - apply rules
['FTE'] = N:
	IF(['No Period','Start Date'] = 0 & ['No Period','End Date'] = 0,
	# But if Input for the year is 0 then look at first the previous year's input then the last period of previous year
    If(DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)=0,
	    If(DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)=0,
	    DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.12',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure),
	    DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)),
		DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)),
	CONTINUE);
# If no start date but an end date - stet periods after end date
['FTE'] = N:
	IF(['No Period','Start Date'] = 0 & ['No Period','End Date'] <> 0,
		IF(DIMIX('Period',!Period) > DIMIX('Period',TIMST(DayNo(
		DB('Personnel',!Version,'No Period',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !Personnel List, 'System End Date')),'\M-\y')),
			Stet,
		CONTINUE),
	CONTINUE);
# IF No end date but a start date - stet periods before start date
['FTE'] = N:
	IF(['No Period','Start Date'] <> 0 & ['No Period','End Date'] = 0,
		IF(DIMIX('Period',!Period) < DIMIX('Period',TIMST(DayNo(
		DB('Personnel',!Version,'No Period',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !Personnel List, 'System Start Date')),'\M-\y')),
			STET,
		CONTINUE),
	CONTINUE);
# If there is an end date and a start date
['FTE'] = N:
	IF(['No Period','Start Date'] <> 0 & ['No Period','End Date'] <> 0,
		IF(DIMIX('Period',!Period) < DIMIX('Period',TIMST(DayNo(
		DB('Personnel',!Version,'No Period',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !Personnel List, 'System Start Date')),'\M-\y')) %
		DIMIX('Period',!Period) > DIMIX('Period',TIMST(DayNo(
		DB('Personnel',!Version,'No Period',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !Personnel List, 'System End Date')),'\M-\y')),
			Stet,
		CONTINUE),
	CONTINUE);
# If the start date is in the period - work out the proportion
['FTE'] = N:
	IF(DIMIX('Period',!Period) = DIMIX('Period',TIMST(DayNo(
	DB('Personnel',!Version,'No Period',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !Personnel List, 'System Start Date')),'\M-\y')),
	# Work out days remaining in the month
		(DB('Assumptions', 'No Version',!Period,'No Entity','No Currency', 'Days in Month','Value')	-
		NUMBR(TIMST(DayNo(
		DB('Personnel',!Version,'No Period',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !Personnel List, 'System Start Date')),'\D'))+1)\
		DB('Assumptions', 'No Version',!Period,'No Entity','No Currency', 'Days in Month','Value') *
		# If input isnt populated for that year use prior period
		If(DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)=0,
			If(Subst(!Period, 6,2) @= '01',
				DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure),
			DB('Personnel', !Version, ATTRS('Period',!Period,'previousperiod'),!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)),
		DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)),
	CONTINUE);
# If the End Date is in the period - work out in the proportion
['FTE'] = N:
	IF(DIMIX('Period',!Period) = DIMIX('Period',TIMST(DayNo(
		DB('Personnel',!Version,'No Period',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !Personnel List, 'System End Date')),'\M-\y')),
		NUMBR(TIMST(DayNo(
		DB('Personnel',!Version,'No Period',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !Personnel List, 'System End Date')),'\D'))\
		DB('Assumptions', 'No Version',!Period,'No Entity','No Currency', 'Days in Month','Value')*
		# If input isnt populated for that year use prior period
		If(DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)=0,
			If(Subst(!Period, 6,2) @= '01',
				DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.12',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure),
			DB('Personnel', !Version, ATTRS('Period',!Period,'previousperiod'),!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)),
		DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)),
	CONTINUE);

# Populate all remaining periods with the Input Amount
['FTE'] = N:
	# But if Input for the year is 0 then look at last period of previous year
    If(DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)=0,
	    If(DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)=0,
	    DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.12',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure),
	    DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)),
	DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure));

#EndRegion

#Region Input Calcs which should apply even when FTE is 0
# Salary Increase % - Populate from Assumptions Cube - do we need to stop any increase if they start after the start of the year???
# Stet Default salary increase on new employees
[{'Salary Increase %','Base increase'}]=N:
	IF(ELISANC('Personnel List','New Employees', !PersonnelList) = 1, STET, CONTINUE);
['Salary Increase %']=N:
	IF(ELISANC('Period','All Input',!Period) = 1,
		IF(DB('Assumptions',!Version,!Period,!Entity,'No Currency','Salary Increase %','%') <> 0,
			DB('Assumptions',!Version,!Period,!Entity,'No Currency','Salary Increase %','%'),
		DB('Assumptions',!Version,!Period,'No Entity','No Currency','Salary Increase %','%')),
	CONTINUE);

# ACC Amount - Based on Global rate (potentially Entity specific) up to a maximum - based on taxable Allowances (use total rem for moment)
['ACC Amount']=N:
	IF(ELISANC('Period','All Input',!Period) = 1,
		IF(IF(DB('Assumptions',!Version,!Period,!Entity,'No Currency','ACC Rate','Value') <> 0,
		DB('Assumptions',!Version,!Period,!Entity,'No Currency','ACC Rate','Value'),
		DB('Assumptions',!Version,!Period,'No Entity','No Currency','ACC Rate','Value'))*
		If(['Total Base Salary']=0,
			DB('Personnel', !Version, Subst(!Period,1,5)|'FY',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Total Remuneration'),
		['Total Remuneration'] )>
		DB('Assumptions',!Version,!Period,'No Entity','No Currency','ACC Maximum Amount','Value'),
		DB('Assumptions',!Version,!Period,'No Entity','No Currency','ACC Maximum Amount','Value'),
		IF(DB('Assumptions',!Version,!Period,!Entity,'No Currency','ACC Rate','Value') <> 0,
		DB('Assumptions',!Version,!Period,!Entity,'No Currency','ACC Rate','Value'),
		DB('Assumptions',!Version,!Period,'No Entity','No Currency','ACC Rate','Value'))*
		If(['Total Base Salary']=0,
			DB('Personnel', !Version, Subst(!Period,1,5)|'FY',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Total Remuneration'),
		['Total Remuneration'])),
	CONTINUE);

# Bonus Provision use Bonus Override if there is a number
['Bonus Provision']=N:
	IF(ELISANC('Period','All Input',!Period) = 1,
		# If not numbers against input for the year populated then look at previous Bonus amount
		IF(['Total Base Salary'] = 0,
			DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Bonus'),
			IF(['Bonus override']<> 0,['Bonus Override'],['Bonus']))	*
		IF(DB('Assumptions',!Version,!Period,!Entity,'No Currency','Bonus %','%') <> 0,
			DB('Assumptions',!Version,!Period,!Entity,'No Currency','Bonus %','%'),
		DB('Assumptions',!Version,!Period,'No Entity','No Currency','Bonus %','%')),
	CONTINUE);

#EndRegion


#Region FTE Stets
#Name Stet FTEs
#Desc Stet Rules below from applying Where FTE is 0
#Date June-2014
#Author Louise Davenport
#Group Stet Rules
#Stet anything where FTE is zero
[]=N:
	IF(['FTE'] = 0,
		STET,
	CONTINUE);
#EndRegion

#Region Headcount calculation
#Name Headcount calculation
#Desc Set heacount based on FTE entered
#Date August-2014
#Author Inel Peacock
#Group Heacount rules
['Headcount']=N:
	IF(['FTE'] > 0 & ['FTE'] <= 1,
		1,
		IF(['FTE']>1,
			ROUND(['FTE']+0.49999),
		CONTINUE)
	);
#EndRegion

#Region Populate Cost Centre measure
#Name Populate Cost Centre
#Desc If Capex is not being centrally planned, pre-populate the Cost Centre measure in template
#Date June-2014
#Author Inel Botha
#Group Cost Centre rules
['Cost Centre'] =S:
	IF (DB('Assumptions', 'No Version','No Period', 'No Entity','No Currency', 'Personnel - centrally planned', 'String')@<>'Yes',
		IF(!Period @= 'No Period',
			IF(DTYPE('Cost Centre', !Cost Centre)@='N',
				IF(!Cost Centre@<>'Capex Cost Centre' & !Cost Centre @<> 'Personnel Cost Centre',
					IF(DTYPE('Personnel List', !Personnel List)@='N',
						!Cost Centre,
						STET),
				STET),
			STET),
		STET),
	STET);
#EndRegion

#Region Rules on Input Periods
#Name Populate Benefits
#Desc Populate Benefits from Assumptions if Flagged
#Date June-2014
#Author Louise Davenport
#Group Benefit Rules
# Flag Benefits
[{'Benefit 3','Benefit 4'}]=N:
	IF(ELISANC('Period','All Input',!Period) = 1,
		IF(DB('Personnel',!Version, !Period,!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Flag - '|!PersonnelMeasure) <> 0,
			IF(DB('Assumptions',!Version,!Period,!Entity,'No Currency','Personnel - '|!PersonnelMeasure,'Value') <> 0,
				DB('Assumptions',!Version,!Period,!Entity,'No Currency','Personnel - '|!PersonnelMeasure,'Value'),
			DB('Assumptions',!Version,!Period,'No Entity','No Currency','Personnel - '|!PersonnelMeasure,'Value')),
		STET),
	CONTINUE);

# Amounts as a % of Total Base Salary - apply to input (FTE of 1 equivalent), Months FTE effect
[{'Salary Amount 1','Salary Amount 2','Salary Amount 3'}]=N:
	IF(ELISANC('Period','All Input',!Period) = 1,
		['Total Base Salary']*
		DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Salary % '|Subst(!PersonnelMeasure,15,1)),
	Continue);

# Salary Increase - base on % - whether global or effective override increase
['Base Increase'] = N:
	# If an input period then determine the amount of increase
	IF(ELISANC('Period','All Input',!Period) = 1,
		# If Override entered as 999 then it should be zero
		IF(['Salary increase override'] <> 0,
			IF(['Salary increase override'] = 999,0,['Salary increase override']),
			# If Override entered then use that
		['Base Salary']*['Salary Increase %']),
	# if a non-input period then uses the effective increase %
	['Base Salary']*['Salary Increase %']);


#EndRegion

#Region STET Anything buy Fiscal periods i.e. 00, Input, driver etc
#Name Stet Periods
#Desc Stet Rules from applying to various things
#Date June-2014
#Author Louise Davenport
#Group Stet Rules
#Stet anything but All FYs periods within planning years
[] = N:
	IF (ELISANC('Period', !Version|' Years', !Period) = 0,
		STET,
	Continue);
#EndRegion

#Region Calculations
#Name Calculate Salary Numbers
#Desc Calculate Salary Numbers
#Date June-2014
#Author Louise Davenport
#Group Calculations
# Bonus Calculation - show payment of bonus - likely to be the year after
['Bonus']=N:
# If the bonus payment period exists within the financial year in questions
    If(ELISANC('Period',Subst(!Period,1,5)|'FY',IF(DB('Assumptions',!Version,Subst(!Period,1,5)|'Input',!Entity,'No Currency','Bonus Payment Month','String') @= '',
			DB('Assumptions',!Version,Subst(!Period,1,5)|'Input','No Entity','No Currency','Bonus Payment Month','String'),
			DB('Assumptions',!Version,Subst(!Period,1,5)|'Input',!Entity,'No Currency','Bonus Payment Month','String')))=1,
		IF(DIMIX('Period',!Period) = Dimix('Period',
			IF(DB('Assumptions',!Version,Subst(!Period,1,5)|'Input',!Entity,'No Currency','Bonus Payment Month','String') @= '',
				DB('Assumptions',!Version,Subst(!Period,1,5)|'Input','No Entity','No Currency','Bonus Payment Month','String'),
			DB('Assumptions',!Version,Subst(!Period,1,5)|'Input',!Entity,'No Currency','Bonus Payment Month','String'))),
		DB('Personnel', !Version, Subst(!Period,1,5)|'FY',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Bonus Provision'),
		Continue),
	Continue);
# If it doesn't exist within current fiscal year then look at previous year's assumption and amount
['Bonus']=N:
	IF(DIMIX('Period',!Period) = Dimix('Period',
		IF(DB('Assumptions',!Version,Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input',!Entity,'No Currency','Bonus Payment Month','String') @= '',
				DB('Assumptions',!Version,Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input','No Entity','No Currency','Bonus Payment Month','String'),
			DB('Assumptions',!Version,Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input',!Entity,'No Currency','Bonus Payment Month','String'))),
		DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.FY',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Bonus Provision'),
	CONTINUE);

# Monthly Salary Increase
['Salary Increase %']=N:
	IF(DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Salary increase override') <> 0,
	# Effective Increase %
	DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Base Increase') \
	DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Base Salary'),
	DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure));
# Monthly ACC Amount - use input amount work out effective rate & multiply by monthly amount
['ACC Amount']=N:
	DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'ACC Amount')\
	IF(DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Total Remuneration')=0,
		DB('Personnel', !Version, Subst(!Period,1,5)|'FY',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Total Remuneration'),
	DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Total Remuneration'))*
	['Total Remuneration'];
#EndRegion


#Region Phasing
#Name Phase Amounts
#Desc Phase Amounts into Monthly periods
#Date June-2014
#Author Louise Davenport
#Group Phasing Rules
# Phase it according to salary days
['Base Salary'] = N:
	# If no numbers in Input look at previous year etc
	If(DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)=0,
		# Look at previous year's input first then previous
		If(DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)=0,
			# Determine Full year amount based on period 12
		    DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.12',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)/
		    DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.12',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'FTE')\
		    IF(DB('Assumptions', 'No Version', Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.FY',!Entity,'No Currency', 'Salary Days', '%')=0,
				DB('Assumptions', 'No Version', Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.12','No Entity','No Currency', 'Salary Days', '%'),
			DB('Assumptions', 'No Version', Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.12',!Entity,'No Currency', 'Salary Days', '%')),
		# Use Input for period
	    DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)),
		DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure))*
	IF(DB('Assumptions', 'No Version', Subst(!Period,1,5)|'FY',!Entity,'No Currency', 'Salary Days', '%')=0,
		DB('Assumptions', 'No Version', !Period,'No Entity','No Currency', 'Salary Days', '%'),
		DB('Assumptions', 'No Version', !Period,!Entity,'No Currency', 'Salary Days', '%'))*
	# FTE Effect it
	['FTE'];
# FTE effect Bonus Provision
['Bonus Provision'] = N:
	DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)\12*
	['FTE'];
# Amounts as a % of Total Base Salary - apply to input (FTE of 1 equivalent), Months FTE effect
[{'Salary % 1','Salary % 2','Salary % 3'}]=N:
	# If Input is zero the look at period 12 of prior year - don't need to worry about salary days as evenly spread
	If(DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)=0,
		If(DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)=0,
		    DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.12',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure),
	    DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)),
	DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure));

[{'Salary Amount 1','Salary Amount 2','Salary Amount 3'}]=N:
	['Total Base Salary']*
	DB('Personnel', !Version, !Period,!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Salary % '|Subst(!PersonnelMeasure,15,1));

#Phase Amounts evenly
[{'Benefit Fixed 1','Benefit Fixed 2','Benefit 3','Benefit 4'}]=N:
	# If Input is zero the look at period 12 of prior year - don't need to worry about salary days as evenly spread
	If(DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)=0,
		If(DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)=0,
		    DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.12',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)\
		    DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.12',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'FTE')*12,
	    DB('Personnel', !Version, Str(Numbr(Subst(!Period,1,4))-1,4,0)|'.Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure)),
	DB('Personnel', !Version, Subst(!Period,1,5)|'Input',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure))\12*['FTE'];

#EndRegion



FEEDERS;
#Region Feed Conversion from Local to Group
['Dynamic Versions','Planning Years','All Currencies','Local']=>
	['Converted'];
['Dynamic Versions','Planning Years','All Currencies','Converted']=>
	DB('Personnel',!Version,!Period,!Entity, !Cost Centre, !Project,
	DB('Assumptions', 'No Version','No Period', 'No Entity', 'No Currency', 'Reporting Currency', 'String'),'Group',
	!Personnel List,!Personnel Measure);
#EndRegion

#Region Feed Input Calcs
# Bonus Provision
['Dynamic Versions','All Input','Local',{'Bonus','Bonus Override'}]=>
	['Bonus Provision'];

#EndRegion

#Region Feed Strings
['Dynamic Versions','No Period', {'System End Date','System Start Date'}]=>
	['End Date'], ['Start Date'],['Planning Years','FTE'];

#EndRegion

#Region Feed To All Months
['Dynamic Versions','All Input','Local']=>
	DB('Personnel', !Version, Subst(!Period,1,5)|'FY',!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, !PersonnelMeasure);
['Dynamic Versions','Planning Years','Local','FTE']=>
		['Planning Years','FTE'],
		['Planning Years','Total Remuneration'];
['Dynamic Versions','All Input','Local','FTE']=>
		['Total Remuneration'],
		['ACC Amount'],
		['Planning Years','Salary Increase %'],
		['Planning Years','Salary % 1'],
		['Planning Years','Salary % 2'],
		['Planning Years','Salary % 3'],
		['Planning Years','Bonus'],
		['Headcount'];
['Dynamic Versions','Planning Years','Local','FTE']=>
		['Total Remuneration'],
		['ACC Amount'],
		['Salary Increase %'],
		['Salary % 1'],
		['Salary % 2'],
		['Salary % 3'],
		['Headcount'];
['Dynamic Versions','Planning Years','Local','Bonus Provision']=>
	DB('Personnel', !Version, IF(DB('Assumptions',!Version,Subst(!Period,1,5)|'Input',!Entity,'No Currency','Bonus Payment Month','String') @= '',
		DB('Assumptions',!Version,Subst(!Period,1,5)|'Input','No Entity','No Currency','Bonus Payment Month','String'),
		DB('Assumptions',!Version,Subst(!Period,1,5)|'Input',!Entity,'No Currency','Bonus Payment Month','String')),!Entity,!Cost Centre, !Project, !Currency, !ReportType, !PersonnelList, 'Bonus');

#EndRegion

#Region Feed to Other Cubes
# Feed from Bottom Level
['Dynamic Versions', 'Planning Years','Local','Total Employees',{'ACC Amount', 'Total Remuneration', 'Total Base Salary','Bonus Liability'}]=>
	DB('PL',!Version,!Period,!Entity,!Cost Centre, !Project,!Currency,!Report Type, ElPar('Personnel Measure',!Personnel Measure,1),'Amount'),
	DB('Financials',!Version,!Period,!Entity,!Cost Centre, !Project,!Currency,!Report Type,ElPar('Personnel Measure',!Personnel Measure,1),'Amount');
# Feed from Bottom Level
['Dynamic Versions', 'Planning Years','Local','Total Employees','Total Remuneration']=>
	DB('PL',!Version,!Period,!Entity,!Cost Centre, !Project,!Currency,!Report Type,ElPar('Personnel Measure',!Personnel Measure,1),'Amount');
['Dynamic Versions', 'Planning Years','Local','Total Employees','Total Base Salary']=>
	DB('PL',!Version,!Period,!Entity,!Cost Centre, !Project,!Currency,!Report Type,ElPar('Personnel Measure',!Personnel Measure,1),'Amount');
['Dynamic Versions', 'Planning Years','Local','Total Employees','Bonus Liability']=>
	DB('Financials',!Version,!Period,!Entity,!Cost Centre, !Project,!Currency,!Report Type,ElPar('Personnel Measure',!Personnel Measure,1),'Amount');
#EndRegion